{"version":3,"file":"static/js/907.9889de3b.chunk.js","mappings":"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","sources":["components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/appBanner/AppBanner.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            console.log(1);\r\n            return <ErrorMessage />;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import errorGif from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img\r\n            src={errorGif}\r\n            alt=\"Error gif\"\r\n            style={{\r\n                display: 'block',\r\n                width: '250px',\r\n                height: '250px',\r\n                objectFit: 'contain',\r\n                margin: '0 auto'\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './comicsList.scss';\n\nconst ComicsList = props => {\n    const { loading, error, getAllComics, _baseComicOffset } = useMarvelService();\n\n    const [comics, setComics] = useState([]);\n    const [newItemsLoading, setNewItemsLoading] = useState(false);\n    const [offset, setOffset] = useState(_baseComicOffset);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    const onRequest = (offset, initial) => {\n\n\n        setNewItemsLoading(initial ? false : true);\n\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n            .catch(error => { throw error.message });\n    }\n\n    const onComicsListLoaded = (newComics) => {\n        let ended = false;\n\n        if (newComics.length < 8) ended = true;\n\n        setComics(comics => [...comics, ...newComics]);\n        setNewItemsLoading(false);\n        setOffset(offset => offset + 8);\n        setComicsEnded(ended);\n    }\n\n    const renderItems = comics => {\n        comics = comics.map(({ id, thumbnail, title, price }, index) => (\n            <CSSTransition\n                key={index}\n                classNames=\"comics__item\"\n                timeout={400}\n            >\n                <li\n                    className=\"comics__item\"\n                    tabIndex={0}\n                >\n                    <Link to={`/comics/${id}`}>\n                        <img src={thumbnail} alt=\"comic\" className=\"comics__item-img\" />\n                        <div className=\"comics__item-name\">{title}</div>\n                        <div className=\"comics__item-price\">{price}</div>\n                    </Link>\n                </li>\n            </CSSTransition>\n        ));\n\n        return (\n            <ul className=\"comics__grid\">\n                <TransitionGroup component={null}>\n                    {comics}\n                </TransitionGroup>\n            </ul>\n        );\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null,\n        spinner = loading && !newItemsLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {renderItems(comics)}\n            <button\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}\n                disabled={newItemsLoading}\n                style={{ 'display': comicsEnded ? 'none' : 'block' }}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    );\n}\n\nexport default ComicsList;","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            <ErrorBoundary>\r\n                <ComicsList />\r\n            </ErrorBoundary>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ComicsPage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=5feaf92d234eb7f2aa5a014a2bd2e75d';\r\n    const _baseOffset = 210;\r\n    const _baseComicOffset = 0;\r\n\r\n    const _transformCharacter = (character) => {\r\n        return {\r\n            id: character.id,\r\n            name: character.name,\r\n            description: character.description ? `${character.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: character.thumbnail.path + '.' + character.thumbnail.extension,\r\n            homepage: character.urls[0].url,\r\n            wiki: character.urls[1].url,\r\n            comics: character.comics.items.splice(0, 10)\r\n        }\r\n    }\r\n\r\n    const _transformComic = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title || 'Title is not available',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            price: comic.prices[0].price ? comic.prices[0].price + '$' : 'Price is not available',\r\n            pageCount: comic.pageCount ? `${comic.pageCount} pages` : 'No information about the number of pages',\r\n            language: comic.textObjects.language || 'en-us',\r\n            description: comic.description || 'There is no description'\r\n        };\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseComicOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComic);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    }\r\n\r\n    return { loading, error, getAllCharacters, getCharacter, _baseOffset, _baseComicOffset, getComic, clearError, getAllComics };\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false)\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return { loading, request, error, clearError };\r\n};"],"names":["ErrorBoundary","state","error","errorInfo","console","log","this","setState","props","children","Component","src","errorGif","alt","style","display","width","height","objectFit","margin","useMarvelService","loading","getAllComics","_baseComicOffset","useState","comics","setComics","newItemsLoading","setNewItemsLoading","offset","setOffset","comicsEnded","setComicsEnded","useEffect","onRequest","initial","then","onComicsListLoaded","catch","message","newComics","ended","length","errorMessage","ErrorMessage","spinner","Spinner","className","map","index","id","thumbnail","title","price","CSSTransition","classNames","timeout","tabIndex","to","TransitionGroup","component","renderItems","onClick","disabled","avengers","avengersLogo","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","_apiBase","_apiKey","_transformCharacter","character","name","description","slice","path","extension","homepage","urls","wiki","items","splice","_transformComic","comic","prices","pageCount","language","textObjects","getAllCharacters","res","results","getCharacter","getComic","_baseOffset"],"sourceRoot":""}